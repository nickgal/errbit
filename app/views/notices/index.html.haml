- content_for :page_title, problem.message
- content_for :title_css_class, "err_show #{'resolved' if problem.resolved?}"
- content_for :title, problem.error_class || truncate(problem.message, :length => 32)
- content_for :meta do
  %strong App:
  = link_to app.name, app
  %strong Where:
  = problem.where
  %br
  %strong Environment:
  = problem.environment
  %strong Last Notice:
  = problem.last_notice_at.to_s(:precise)
- content_for :action_bar do
  - if problem.unresolved?
    %span= link_to 'resolve', [:resolve, app, problem], :method => :put,
      :data => { :confirm => problem_confirm('resolve_one') }, :class => 'resolve'
  - if current_user.authentication_token
    %span
      = link_to polymorphic_path([app, problem], :format => "ics", :auth_token => current_user.authentication_token) do
        %i.fa.fa-calendar
        iCal
  %span>= link_to 'up', (request.env['HTTP_REFERER'] ? :back : polymorphic_path([app, problem])), :class => 'up'
  %br
  = render "problems/issue_tracker_links"

.window
  %table
    %tr
      %th ID
      %th Message
      %th User
      %th Host
      %th Url
      %th Created at
      %th User agent
      %th app_version
      %th HTTP_X_FORWARDED_FOR
      %th Params
    - @notices.each do |notice|
      %tr
        %td
          = notice.id
        %td= notice.message
        %td= notice.user_attributes
        %td= link_to notice.host, "//#{notice.host}"
        %td= link_to nil, notice.url
        %td= notice.created_at.to_s(:precise)
        %td= notice.user_agent_string
        %td= notice.app_version
        %td= notice.env_vars['HTTP_X_FORWARDED_FOR']
        %td= notice.params
        -# %td= notice.inspect
= paginate @notices
